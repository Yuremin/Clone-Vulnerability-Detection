import sys
sys.path.append("./antlr")
from antlr4 import *
from antlr.JavaLexer import JavaLexer
from antlr.JavaParser import JavaParser
from antlr.JavaParserListener import JavaParserListener
import codecs


class FunctionPrinter(JavaParserListener):
    def __init__(self):
        self.function_list = []
    def getAllText(self, ctx):
        token_stream = ctx.parser.getTokenStream()
        lexer = token_stream.tokenSource
        input_stream = lexer.inputStream
        start = ctx.start.start
        stop = ctx.stop.stop
        return input_stream.getText(start, stop)

    def enterMethodDeclaration(self, ctx):
        variables = []
        """Feb 9,2023
        for i in ctx.methodBody().block().blockStatement():
            if i.localVariableDeclaration():
                if i.localVariableDeclaration().identifier():
                    variables.append(i.localVariableDeclaration().identifier().getText())
                elif i.localVariableDeclaration().variableDeclarators():
                    for j in i.localVariableDeclaration().variableDeclarators().variableDeclarator():
                        variables.append(j.variableDeclaratorId().getText())
        """
        

        self.function_list.append({
            "funcbody":self.getAllText(ctx.methodBody()),
            "name":ctx.identifier().getText(),
            "parameters":ctx.formalParameters().getText(),
            "variables":variables
            })
        
def javaparser(path):
    input_stream = FileStream(path,'utf-8')
    lexer = JavaLexer(input_stream)
    stream = CommonTokenStream(lexer)
    parser = JavaParser(stream)
    tree = parser.compilationUnit()

    printer = FunctionPrinter()

    walker = ParseTreeWalker()
    walker.walk(printer, tree)

    return printer.function_list


 
if __name__ == '__main__':
    main(sys.argv)
