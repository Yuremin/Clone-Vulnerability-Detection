import sys
#import cparser as cp
import javaparser as cp
from hashlib import md5
from tkinter import *
from tkinter import messagebox
from tqdm import tqdm

class App:
    def __init__(self, master):
        self.master = master

#===================================================================#
#===================================================================#
#==============The shape and position of the root window=============#
        ws = master.winfo_screenwidth()
        hs = master.winfo_screenheight()
        self.width = 800
        self.height = 600
        self.x = (ws/2) - (self.width/2)
        self.y = (hs/2) - (self.height/2)
        master.geometry("%dx%d+%d+%d"%(self.width, self.height, self.x, self.y))
    
        self.menubar = Menu(master, tearoff=1)
        self.menubar.add_command(label="帮助", command=self.show_help)
        self.menubar.add_command(label="关于LCVD", command=self.show_about)
        master.config(menu=self.menubar)


#======================================================================#
#======================================================================#
#======================指纹生成阶段====================================#
#======================================================================#
        self.button_generator = Button(
            master,
            width=10,
            text="选择文件夹",
            command=generate_cli
        )
        self.button_generator.pack(row=0, column=0,padx=20)

        self.button_generator2 = Button(
            master,
            width=10,
            text="指纹生成",
            command=generate_cli
        )        
        self.button_generator2.grid(row=0, column=2, padx=20)


        frame_process = Frame(master)
        frame_process.grid(row=2,rowspan=3,columnspan=10)

        scrollbar = Scrollbar(frame_process)
        scrollbar.grid(row=2, rowspan=3,column=9)
        self.list_process = Listbox(frame_process, height=10,
                                           yscrollcommand=scrollbar.set, selectmode=SINGLE)
        self.list_process.grid(row=2, rowspan=3, column=1, columnspan=10)
        scrollbar.config(command=self.list_process.yview)

#============================================================================#
#============================================================================#
#============================================================================#
#===================================比对阶段=================================#


        frmBottom = Frame(master)
        frmBottom.grid(row=3)

        self.btnOpenFolder = Button(
            frmBottom,
            width=15,
            text="Open hidx folder",
            state="disabled",
            command=self.openFolder
        )
        
        self.btnOpenFolder.grid(row=3)

        self.button_detector = Button(
            frmBottom,
            width=15,
            text="Open hidx folder",
            state="disabled",
            command=self.openFolder
        )
        
        self.button_detector.grid(row=3)


    def openFolder(self):
        path = os.path.join(os.getcwd())
        subprocess.Popen(
                ["xdg-open", path],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
 

    def show_help(self):
        top = Toplevel()
        top.title = "帮助"

        helpMessage = "1.选择待测文件夹\n\n2.选择抽象模式\n\n3.生成指纹\n\n4.进行比对"
        msg = Message(top, text=helpMessage)
        msg.pack()
        top.update()
        topw = 1/2*self.width
        toph = 1/2*self.height

        top.geometry(f"{int(topw)}x{int(toph)}+{int(self.x+self.width/2-topw/2)}+{int(self.y+self.height/2-toph/2)}")
 


    def show_about(self):
        top = Toplevel()
        top.title = "关于"
        aboutMessage = "Developed by Proof@NDS"
        msg = Message(top, text = aboutMessage)
        msg.pack()
        top.update()
        topw = 1/2*self.width
        toph = 1/2*self.height

        top.geometry(f"{int(topw)}x{int(toph)}+{int(self.x+self.width/2-topw/2)}+{int(self.y+self.height/2-toph/2)}")

 

def generate_cli(target_path, is_abstraction, language):
    if is_abstraction.lower() == "on":
        abstract_level = 4
    else:
        abstract_level = 0
        
    filelist = cp.load_directory(target_path)
    num_file = len(filelist)
    
    if num_file == 0:
        print("[-] Error: Failed to load source files")
        print("    Check if you selected the proper directory, or if your project contains .c or .cpp files")
        sys.exit()

    for file in tqdm(filelist):
        if abstract_level == 0:
            function_instance_list = cp.parsefile_shallow(file)
        else:
            function_instance_list = cp.parsefile_deep(file)


        for f in tqdm(function_instance_list):
            path = f.parent_file
            abstract_body = cp.abstraction(f, abstract_level)[1]
            abstract_body = cp.normalization(abstract_body)
            func_len = len(abstract_body)
        
            if func_len > 50:
                hashvalue = md5(abstract_body.encode()).hexdigest()
                print(hashvalue)

            else:
                print(f"The {path} 's function {f.name} is too short.")

def run_cli():
    pass


def run_gui():
    root = Tk()
    app = App(root)
    root.title("LCVD检测系统")
    
    root = mainloop()
 

def main():
    run_gui()
    #generate_cli("antlr/test", "on", "java")



if __name__=="__main__":
    main()
