import sys
#import cparser as cp
import javaparser as cp
from hashlib import md5
from tkinter import *
from tkinter import messagebox
from tqdm import tqdm


def run_cli():
    pass


def generate_cli(target_path, is_abstraction, language):
    if is_abstraction.lower() == "on":
        abstract_level = 4
    else:
        abstract_level = 0
        
    filelist = cp.load_directory(target_path)
    num_file = len(filelist)
    
    if num_file == 0:
        print("[-] Error: Failed to load source files")
        print("    Check if you selected the proper directory, or if your project contains .c or .cpp files")
        sys.exit()

    for file in tqdm(filelist):
        if abstract_level == 0:
            function_instance_list = cp.parsefile_shallow(file)
        else:
            function_instance_list = cp.parsefile_deep(file)


        for f in tqdm(function_instance_list):
            path = f.parent_file
            abstract_body = cp.abstraction(f, abstract_level)[1]
            abstract_body = cp.normalization(abstract_body)
            func_len = len(abstract_body)
        
            if func_len > 50:
                hashvalue = md5(abstract_body.encode()).hexdigest()
                print(hashvalue)
                with open("../fingerprint/java_fingerprint.cvd", "a") as f:
                    f.write(hashvalue+"\n")

            else:
                print(f"The {path} 's function {f.name} is too short.")


def main():
    generate_cli("../data/java", "on", "java")



if __name__=="__main__":
    main()
