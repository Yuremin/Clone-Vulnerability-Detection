import sys
#import cparser as cp
import javaparser as cp
from hashlib import md5
from tkinter import *
from tkinter import messagebox
from tqdm import tqdm

class App:
    def __init__(self, master):
        self.master = master
        master.geometry("600x450+374+182")
    
        self.menubar = Menu(master, tearoff=1)
        self.menubar.add_command(label="帮助", command=self.show_help)
        self.menubar.add_command(label="关于LCVD", command=self.show_about)
        master.config(menu=self.menubar)

        
        frmGenerate = Frame(master)
        frmGenerate.pack(fill=BOTH, padx=50, pady=5)
        self.btnGenerate = Button(
            frmGenerate,
            width=10000,
            text="----- Generate fingerprints -----",
            state="disabled",
            command=generate_cli
        )
        self.btnGenerate.pack(side=BOTTOM)


        frmProcess = Frame(master)
        frmProcess.pack(fill=X)

        scrollbar = Scrollbar(frmProcess)
        scrollbar.pack(side=RIGHT, fill=Y)
        self.listProcess = Listbox(frmProcess, state="disabled", width=600, height=26,
                                           yscrollcommand=scrollbar.set, selectmode=SINGLE)
        # self.listProcess.insert(END, "")
        self.listProcess.pack(side=LEFT, fill=BOTH)
        scrollbar.config(command=self.listProcess.yview)




        frmBottom = Frame(master)  # , bd=20)
        frmBottom.pack(fill=BOTH)

        self.btnOpenFolder = Button(
            frmBottom,
            width=15,
            text="Open hidx folder",
            state="disabled",
            command=self.openFolder
        )
        
        self.btnOpenFolder.pack(side=LEFT, padx=50)

    def openFolder(self):
        path = os.path.join(os.getcwd())
        subprocess.Popen(
                ["xdg-open", path],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
 



    def show_help(self):
        pass
    def show_about(self):
        top = Toplevel(padx=20, pady=10)
        aboutMessage = "LCVD is Developed by Proof@NDS"
        msg = Message(top, text = aboutMessage)
        msg.pack()
        btnOkay = Button(top, text="Okay", command=top.destroy)
        btnOkay.pack()

        top.update()
        topw = top.winfo_reqwidth()  # width of this widget
        toph = top.winfo_reqheight()  # height of this widget
        parentGeo = self.master.geometry().split('+')
        parentX = int(parentGeo[1])  # X coordinate of parent (the main window)
        parentY = int(parentGeo[2])  # Y coordinate of parent

        top.geometry("+%d+%d" % (parentX + self.mainWidth / 2 - topw / 2, parentY + self.mainHeight / 2 - toph / 2))
        top.resizable(width=False, height=False)
        top.grab_set_global()
        top.title("About hmark...")
 

def generate_cli(target_path, is_abstraction, language):
    if is_abstraction.lower() == "on":
        abstract_level = 4
    else:
        abstract_level = 0
        
    filelist = cp.load_directory(target_path)
    num_file = len(filelist)
    
    if num_file == 0:
        print("[-] Error: Failed to load source files")
        print("    Check if you selected the proper directory, or if your project contains .c or .cpp files")
        sys.exit()

    for file in tqdm(filelist):
        if abstract_level == 0:
            function_instance_list = cp.parsefile_shallow(file)
        else:
            function_instance_list = cp.parsefile_deep(file)


        for f in tqdm(function_instance_list):
            path = f.parent_file
            abstract_body = cp.abstraction(f, abstract_level)[1]
            abstract_body = cp.normalization(abstract_body)
            func_len = len(abstract_body)
        
            if func_len > 50:
                hashvalue = md5(abstract_body.encode()).hexdigest()
                print(hashvalue)

            else:
                print(f"The {path} 's function {f.name} is too short.")

def run_cli():
    pass


def run_gui():
    root = Tk()
    app = App(root)
    root.title("LCVD检测系统")
    
    root = mainloop()
 

def main():
    run_gui()
    #generate_cli("antlr/test", "on", "java")



if __name__=="__main__":
    main()
