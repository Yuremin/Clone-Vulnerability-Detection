import tkinter as tk
import ttkbootstrap as ttk
from ttkbootstrap.constants import *
import subprocess
import os
import sys
from tkinter import filedialog
from run import main
import tqdm



class LCVDScreen(tk.Tk):
    def __init__(self):
        super().__init__()
        self.path_generation = ""
        self.path_detection = ""
       
        self.title("LCVD漏洞检测系统")
        self.geometry("800x600")
        self.resizable(False, False)
        
        self.menubar = ttk.Menu(self, tearoff=0)
        self.menubar.add_command(label="帮助", command=self.show_help)
        self.menubar.add_command(label="关于", command=self.show_help)
        self.config(menu=self.menubar)
        

        self.top_frame = ttk.Frame(self,
                                   bootstyle="secondary",
                                    )
        self.top_frame.pack(fill=tk.BOTH)
        self.top_separator_bottom = ttk.Separator(bootstyle="primary").pack(fill=tk.X)
        self.bottom_frame = ttk.Frame(self,
                                      bootstyle="secondary")
        self.bottom_frame.pack(fill=tk.BOTH, expand=True)   
#=========================================================================================
#=====================================top frame===========================================
#=========================================================================================
        #====================Button dataloader1====================
        self.button_dataloader1 = ttk.Button(
                self.top_frame,
                text="加载文件夹",
                command=self.select_directory1,
                width=10,
                bootstyle="info")
        self.button_dataloader1.grid(row=0, column=0, pady=10, sticky=E)
        self.show_dataloader1 = ttk.Entry(self.top_frame)
        self.show_dataloader1.grid(row=0, column=1, sticky=W)

        #========================Button generator================
        self.button_generator = ttk.Button(
                self.top_frame,
                text="生成指纹",
                command=self.generator,
                width=10,
                )
        self.button_generator.grid(row=0, column=2, padx=5, pady=10)
        scrollbar1 = tk.Scrollbar(self.top_frame)
        scrollbar1.grid(row=1, column=2, sticky=NS)
        self.generator_process = tk.Listbox(self.top_frame,
                                            height=10,
                                            width=95,
                                            bg="yellow",
                                            yscrollcommand=scrollbar1.set)
        self.generator_process.grid(row=1, column=0, columnspan=3)
        scrollbar1.config(command=self.generator_process.yview)

#=============================================================================================
#=========================bottom frame========================================================
#=============================================================================================
        #=======================Button dataloader2======================
        self.button_dataloader2 = ttk.Button(
                self.bottom_frame,
                text="选择待测文件夹",
                command=self.select_directory2,
                width=10,
                bootstyle="info")
        self.button_dataloader2.grid(row=0, column=0, pady=10, sticky=E)
        self.show_dataloader2 = ttk.Entry(self.bottom_frame)
        self.show_dataloader2.grid(row=0, column=1, sticky=W)

        #=======================Button detector========================
        self.button_detector = ttk.Button(
                self.bottom_frame,
                text="开始检测",
                command=self.show_help,
                width=10)
        self.button_detector.grid(row=0, column=2, padx=5, pady=10)
        scrollbar2 = tk.Scrollbar(self.bottom_frame)
        scrollbar2.grid(row=1, column=2, sticky=NS)
        self.detector_process = tk.Listbox(self.bottom_frame,
                                           height=10,
                                           width=95,
                                           bg="yellow",
                                           yscrollcommand=scrollbar2.set,
                                           )
        self.detector_process.grid(row=1, column=0, columnspan=3)
        scrollbar2.config(command=self.detector_process.yview)

        

    def show_help():
        pass

    def select_directory1(self):
        selected_directory = filedialog.askdirectory()
        self.path_generation = selected_directory
        self.show_dataloader1.delete(0,END)
        self.show_dataloader1.insert(0,selected_directory)
    def select_directory2(self):
        selected_directory = filedialog.askdirectory()
        self.path_detection = selected_directory
        self.show_dataloader2.delete(0,END)
        self.show_dataloader2.insert(0,selected_directory)
 
    def open_folder(self):
        subprocess.Popen(
                ["xdg-open", os.getcwd()],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
                )
    def generator(self):
        import javaparser as cp
        filelist = cp.load_directory(self.path_generation)
        num_file = len(filelist)
        
        if num_file == 0:
            self.generator_process.insert(END, "[-] Error: Failed to load source files")
            self.generator_process.insert(END, "    Check if you selected the proper directory, or if your project contains .c or .cpp files")
            sys.exit()

        for file in tqdm(filelist):
            if abstract_level == 0:
                function_instance_list = cp.parsefile_shallow(file)
            else:
                function_instance_list = cp.parsefile_deep(file)


            for f in tqdm(function_instance_list):
                path = f.parent_file
                abstract_body = cp.abstraction(f, abstract_level)[1]
                abstract_body = cp.normalization(abstract_body)
                func_len = len(abstract_body)
            
                if func_len > 50:
                    hashvalue = md5(abstract_body.encode()).hexdigest()
                    print(hashvalue)
                    with open("../fingerprint/java_fingerprint.cvd", "a") as f:
                        f.write(hashvalue+"\n")

                else:
                    print(f"The {path} 's function {f.name} is too short.")
 



if __name__=="__main__":
    screen = LCVDScreen()
    screen.mainloop()
