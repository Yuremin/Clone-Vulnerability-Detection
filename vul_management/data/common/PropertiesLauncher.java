package org.springframework.boot.loader;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Constructor;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.jar.Manifest;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.springframework.boot.loader.archive.Archive;
import org.springframework.boot.loader.archive.ExplodedArchive;
import org.springframework.boot.loader.archive.JarFileArchive;
import org.springframework.boot.loader.util.SystemPropertyUtils;

public class PropertiesLauncher extends Launcher {
  private static final Class<?>[] PARENT_ONLY_PARAMS = new Class[] { ClassLoader.class };
  
  private static final Class<?>[] URLS_AND_PARENT_PARAMS = new Class[] { URL[].class, ClassLoader.class };
  
  private static final Class<?>[] NO_PARAMS = new Class[0];
  
  private static final URL[] NO_URLS = new URL[0];
  
  private static final String DEBUG = "loader.debug";
  
  public static final String MAIN = "loader.main";
  
  public static final String PATH = "loader.path";
  
  public static final String HOME = "loader.home";
  
  public static final String ARGS = "loader.args";
  
  public static final String CONFIG_NAME = "loader.config.name";
  
  public static final String CONFIG_LOCATION = "loader.config.location";
  
  public static final String SET_SYSTEM_PROPERTIES = "loader.system";
  
  private static final Pattern WORD_SEPARATOR = Pattern.compile("\\W+");
  
  private static final String NESTED_ARCHIVE_SEPARATOR = "!" + File.separator;
  
  private final File home;
  
  private List<String> paths = new ArrayList<>();
  
  private final Properties properties = new Properties();
  
  private final Archive parent;
  
  private volatile ClassPathArchives classPathArchives;
  
  public PropertiesLauncher() {
    try {
      this.home = getHomeDirectory();
      initializeProperties();
      initializePaths();
      this.parent = createArchive();
    } catch (Exception ex) {
      throw new IllegalStateException(ex);
    } 
  }
  
  protected File getHomeDirectory() {
    try {
      return new File(getPropertyWithDefault("loader.home", "${user.dir}"));
    } catch (Exception ex) {
      throw new IllegalStateException(ex);
    } 
  }
  
  private void initializeProperties() throws Exception {
    List<String> configs = new ArrayList<>();
    if (getProperty("loader.config.location") != null) {
      configs.add(getProperty("loader.config.location"));
    } else {
      String[] names = getPropertyWithDefault("loader.config.name", "loader").split(",");
      for (String name : names) {
        configs.add("file:" + getHomeDirectory() + "/" + name + ".properties");
        configs.add("classpath:" + name + ".properties");
        configs.add("classpath:BOOT-INF/classes/" + name + ".properties");
      } 
    } 
    for (String config : configs) {
      try (InputStream resource = getResource(config)) {
        if (resource != null) {
          debug("Found: " + config);
          loadResource(resource);
          return;
        } 
        debug("Not found: " + config);
      } 
    } 
  }
  
  private void loadResource(InputStream resource) throws Exception {
    this.properties.load(resource);
    for (Object key : Collections.list(this.properties.propertyNames())) {
      String text = this.properties.getProperty((String)key);
      String value = SystemPropertyUtils.resolvePlaceholders(this.properties, text);
      if (value != null)
        this.properties.put(key, value); 
    } 
    if ("true".equals(getProperty("loader.system"))) {
      debug("Adding resolved properties to System properties");
      for (Object key : Collections.list(this.properties.propertyNames())) {
        String value = this.properties.getProperty((String)key);
        System.setProperty((String)key, value);
      } 
    } 
  }
  
  private InputStream getResource(String config) throws Exception {
    if (config.startsWith("classpath:"))
      return getClasspathResource(config.substring("classpath:".length())); 
    config = handleUrl(config);
    if (isUrl(config))
      return getURLResource(config); 
    return getFileResource(config);
  }
  
  private String handleUrl(String path) throws UnsupportedEncodingException {
    if (path.startsWith("jar:file:") || path.startsWith("file:")) {
      path = URLDecoder.decode(path, "UTF-8");
      if (path.startsWith("file:")) {
        path = path.substring("file:".length());
        if (path.startsWith("//"))
          path = path.substring(2); 
      } 
    } 
    return path;
  }
  
  private boolean isUrl(String config) {
    return config.contains("://");
  }
  
  private InputStream getClasspathResource(String config) {
    while (config.startsWith("/"))
      config = config.substring(1); 
    config = "/" + config;
    debug("Trying classpath: " + config);
    return getClass().getResourceAsStream(config);
  }
  
  private InputStream getFileResource(String config) throws Exception {
    File file = new File(config);
    debug("Trying file: " + config);
    if (file.canRead())
      return new FileInputStream(file); 
    return null;
  }
  
  private InputStream getURLResource(String config) throws Exception {
    URL url = new URL(config);
    if (exists(url)) {
      URLConnection con = url.openConnection();
      try {
        return con.getInputStream();
      } catch (IOException ex) {
        if (con instanceof HttpURLConnection)
          ((HttpURLConnection)con).disconnect(); 
        throw ex;
      } 
    } 
    return null;
  }
  
  private boolean exists(URL url) throws IOException {
    URLConnection connection = url.openConnection();
    try {
      connection.setUseCaches(connection.getClass().getSimpleName().startsWith("JNLP"));
      if (connection instanceof HttpURLConnection) {
        HttpURLConnection httpConnection = (HttpURLConnection)connection;
        httpConnection.setRequestMethod("HEAD");
        int responseCode = httpConnection.getResponseCode();
        if (responseCode == 200)
          return true; 
        if (responseCode == 404)
          return false; 
      } 
      return (connection.getContentLength() >= 0);
    } finally {
      if (connection instanceof HttpURLConnection)
        ((HttpURLConnection)connection).disconnect(); 
    } 
  }
  
  private void initializePaths() throws Exception {
    String path = getProperty("loader.path");
    if (path != null)
      this.paths = parsePathsProperty(path); 
    debug("Nested archive paths: " + this.paths);
  }
  
  private List<String> parsePathsProperty(String commaSeparatedPaths) {
    List<String> paths = new ArrayList<>();
    for (String path : commaSeparatedPaths.split(",")) {
      path = cleanupPath(path);
      path = (path == null || path.isEmpty()) ? "/" : path;
      paths.add(path);
    } 
    if (paths.isEmpty())
      paths.add("lib"); 
    return paths;
  }
  
  protected String[] getArgs(String... args) throws Exception {
    String loaderArgs = getProperty("loader.args");
    if (loaderArgs != null) {
      String[] defaultArgs = loaderArgs.split("\\s+");
      String[] additionalArgs = args;
      args = new String[defaultArgs.length + additionalArgs.length];
      System.arraycopy(defaultArgs, 0, args, 0, defaultArgs.length);
      System.arraycopy(additionalArgs, 0, args, defaultArgs.length, additionalArgs.length);
    } 
    return args;
  }
  
  protected String getMainClass() throws Exception {
    String mainClass = getProperty("loader.main", "Start-Class");
    if (mainClass == null)
      throw new IllegalStateException("No 'loader.main' or 'Start-Class' specified"); 
    return mainClass;
  }
  
  protected ClassLoader createClassLoader(Iterator<Archive> archives) throws Exception {
    String customLoaderClassName = getProperty("loader.classLoader");
    if (customLoaderClassName == null)
      return super.createClassLoader(archives); 
    Set<URL> urls = new LinkedHashSet<>();
    while (archives.hasNext())
      urls.add(((Archive)archives.next()).getUrl()); 
    ClassLoader loader = new LaunchedURLClassLoader(urls.<URL>toArray(NO_URLS), getClass().getClassLoader());
    debug("Classpath for custom loader: " + urls);
    loader = wrapWithCustomClassLoader(loader, customLoaderClassName);
    debug("Using custom class loader: " + customLoaderClassName);
    return loader;
  }
  
  private ClassLoader wrapWithCustomClassLoader(ClassLoader parent, String className) throws Exception {
    Class<ClassLoader> type = (Class)Class.forName(className, true, parent);
    ClassLoader classLoader = newClassLoader(type, PARENT_ONLY_PARAMS, new Object[] { parent });
    if (classLoader == null)
      classLoader = newClassLoader(type, URLS_AND_PARENT_PARAMS, new Object[] { NO_URLS, parent }); 
    if (classLoader == null)
      classLoader = newClassLoader(type, NO_PARAMS, new Object[0]); 
    if (classLoader == null)
      throw new IllegalArgumentException("Unable to create class loader for " + className); 
    return classLoader;
  }
  
  private ClassLoader bad(Class<ClassLoader> loaderClass, Class<?>[] parameterTypes, Object... initargs) throws Exception {
    try {
      Constructor<ClassLoader> constructor = loaderClass.getDeclaredConstructor(parameterTypes);
      constructor.setAccessible(true);
      return constructor.newInstance(initargs);
    } catch (NoSuchMethodException ex) {
      return null;
    } 
  }
  
  private String getProperty(String propertyKey) throws Exception {
    return getProperty(propertyKey, (String)null, (String)null);
  }
  
  private String getProperty(String propertyKey, String manifestKey) throws Exception {
    return getProperty(propertyKey, manifestKey, (String)null);
  }
  
  private String getPropertyWithDefault(String propertyKey, String defaultValue) throws Exception {
    return getProperty(propertyKey, (String)null, defaultValue);
  }
  
  private String getProperty(String propertyKey, String manifestKey, String defaultValue) throws Exception {
    if (manifestKey == null) {
      manifestKey = propertyKey.replace('.', '-');
      manifestKey = toCamelCase(manifestKey);
    } 
    String property = SystemPropertyUtils.getProperty(propertyKey);
    if (property != null) {
      String value = SystemPropertyUtils.resolvePlaceholders(this.properties, property);
      debug("Property '" + propertyKey + "' from environment: " + value);
      return value;
    } 
    if (this.properties.containsKey(propertyKey)) {
      String value = SystemPropertyUtils.resolvePlaceholders(this.properties, this.properties
          .getProperty(propertyKey));
      debug("Property '" + propertyKey + "' from properties: " + value);
      return value;
    } 
    try {
      if (this.home != null)
        try (ExplodedArchive archive = new ExplodedArchive(this.home, false)) {
          Manifest manifest1 = archive.getManifest();
          if (manifest1 != null) {
            String value = manifest1.getMainAttributes().getValue(manifestKey);
            if (value != null) {
              debug("Property '" + manifestKey + "' from home directory manifest: " + value);
              return SystemPropertyUtils.resolvePlaceholders(this.properties, value);
            } 
          } 
        }  
    } catch (IllegalStateException illegalStateException) {}
    Manifest manifest = createArchive().getManifest();
    if (manifest != null) {
      String value = manifest.getMainAttributes().getValue(manifestKey);
      if (value != null) {
        debug("Property '" + manifestKey + "' from archive manifest: " + value);
        return SystemPropertyUtils.resolvePlaceholders(this.properties, value);
      } 
    } 
    return (defaultValue != null) ? SystemPropertyUtils.resolvePlaceholders(this.properties, defaultValue) : defaultValue;
  }
  
  protected Iterator<Archive> getClassPathArchivesIterator() throws Exception {
    ClassPathArchives classPathArchives = this.classPathArchives;
    if (classPathArchives == null) {
      classPathArchives = new ClassPathArchives();
      this.classPathArchives = classPathArchives;
    } 
    return classPathArchives.iterator();
  }
  
  public static void main(String[] args) throws Exception {
    PropertiesLauncher launcher = new PropertiesLauncher();
    args = launcher.getArgs(args);
    launcher.launch(args);
  }
  
  public static String toCamelCase(CharSequence string) {
    if (string == null)
      return null; 
    StringBuilder builder = new StringBuilder();
    Matcher matcher = WORD_SEPARATOR.matcher(string);
    int pos = 0;
    while (matcher.find()) {
      builder.append(capitalize(string.subSequence(pos, matcher.end()).toString()));
      pos = matcher.end();
    } 
    builder.append(capitalize(string.subSequence(pos, string.length()).toString()));
    return builder.toString();
  }
  
  private static String capitalize(String str) {
    return Character.toUpperCase(str.charAt(0)) + str.substring(1);
  }
  
  private void debug(String message) {
    if (Boolean.getBoolean("loader.debug"))
      System.out.println(message); 
  }
  
  private String cleanupPath(String path) {
    path = path.trim();
    if (path.startsWith("./"))
      path = path.substring(2); 
    String lowerCasePath = path.toLowerCase(Locale.ENGLISH);
    if (lowerCasePath.endsWith(".jar") || lowerCasePath.endsWith(".zip"))
      return path; 
    if (path.endsWith("/*")) {
      path = path.substring(0, path.length() - 1);
    } else if (!path.endsWith("/") && !path.equals(".")) {
      path = path + "/";
    } 
    return path;
  }
  
  void close() throws Exception {
    if (this.classPathArchives != null)
      this.classPathArchives.close(); 
    if (this.parent != null)
      this.parent.close(); 
  }
  
  private class ClassPathArchives implements Iterable<Archive> {
    private final List<Archive> classPathArchives;
    
    private final List<JarFileArchive> jarFileArchives = new ArrayList<>();
    
    ClassPathArchives() throws Exception {
      this.classPathArchives = new ArrayList<>();
      for (String path : PropertiesLauncher.this.paths) {
        for (Archive archive : getClassPathArchives(path))
          addClassPathArchive(archive); 
      } 
      addNestedEntries();
    }
    
    private void addClassPathArchive(Archive archive) throws IOException {
      if (!(archive instanceof ExplodedArchive)) {
        this.classPathArchives.add(archive);
        return;
      } 
      this.classPathArchives.add(archive);
      this.classPathArchives.addAll(asList(archive.getNestedArchives(null, new PropertiesLauncher.ArchiveEntryFilter())));
    }
    
    private List<Archive> getClassPathArchives(String path) throws Exception {
      String root = PropertiesLauncher.this.cleanupPath(PropertiesLauncher.this.handleUrl(path));
      List<Archive> lib = new ArrayList<>();
      File file = new File(root);
      if (!"/".equals(root)) {
        if (!isAbsolutePath(root))
          file = new File(PropertiesLauncher.this.home, root); 
        if (file.isDirectory()) {
          PropertiesLauncher.this.debug("Adding classpath entries from " + file);
          Archive archive1 = new ExplodedArchive(file, false);
          lib.add(archive1);
        } 
      } 
      Archive archive = getArchive(file);
      if (archive != null) {
        PropertiesLauncher.this.debug("Adding classpath entries from archive " + archive.getUrl() + root);
        lib.add(archive);
      } 
      List<Archive> nestedArchives = getNestedArchives(root);
      if (nestedArchives != null) {
        PropertiesLauncher.this.debug("Adding classpath entries from nested " + root);
        lib.addAll(nestedArchives);
      } 
      return lib;
    }
    
    private boolean isAbsolutePath(String root) {
      return (root.contains(":") || root.startsWith("/"));
    }
    
    private Archive getArchive(File file) throws IOException {
      if (isNestedArchivePath(file))
        return null; 
      String name = file.getName().toLowerCase(Locale.ENGLISH);
      if (name.endsWith(".jar") || name.endsWith(".zip"))
        return getJarFileArchive(file); 
      return null;
    }
    
    private boolean isNestedArchivePath(File file) {
      return file.getPath().contains(PropertiesLauncher.NESTED_ARCHIVE_SEPARATOR);
    }
    
    private List<Archive> getNestedArchives(String path) throws Exception {
      Archive parent = PropertiesLauncher.this.parent;
      String root = path;
      if ((!root.equals("/") && root.startsWith("/")) || parent
        .getUrl().toURI().equals(PropertiesLauncher.this.home.toURI()))
        return null; 
      int index = root.indexOf('!');
      if (index != -1) {
        File file = new File(PropertiesLauncher.this.home, root.substring(0, index));
        if (root.startsWith("jar:file:"))
          file = new File(root.substring("jar:file:".length(), index)); 
        parent = getJarFileArchive(file);
        root = root.substring(index + 1);
        while (root.startsWith("/"))
          root = root.substring(1); 
      } 
      if (root.endsWith(".jar")) {
        File file = new File(PropertiesLauncher.this.home, root);
        if (file.exists()) {
          parent = getJarFileArchive(file);
          root = "";
        } 
      } 
      if (root.equals("/") || root.equals("./") || root.equals("."))
        root = ""; 
      Archive.EntryFilter filter = new PropertiesLauncher.PrefixMatchingArchiveFilter(root);
      List<Archive> archives = asList(parent.getNestedArchives(null, filter));
      if ((root == null || root.isEmpty() || ".".equals(root)) && !path.endsWith(".jar") && parent != PropertiesLauncher.this
        .parent)
        archives.add(parent); 
      return archives;
    }
    
    private void addNestedEntries() {
      try {
        Iterator<Archive> archives = PropertiesLauncher.this.parent.getNestedArchives(null, JarLauncher.NESTED_ARCHIVE_ENTRY_FILTER);
        while (archives.hasNext())
          this.classPathArchives.add(archives.next()); 
      } catch (IOException iOException) {}
    }
    
    private List<Archive> asList(Iterator<Archive> iterator) {
      List<Archive> list = new ArrayList<>();
      while (iterator.hasNext())
        list.add(iterator.next()); 
      return list;
    }
    
    private JarFileArchive getJarFileArchive(File file) throws IOException {
      JarFileArchive archive = new JarFileArchive(file);
      this.jarFileArchives.add(archive);
      return archive;
    }
    
    public Iterator<Archive> iterator() {
      return this.classPathArchives.iterator();
    }
    
    void close() throws IOException {
      for (JarFileArchive archive : this.jarFileArchives)
        archive.close(); 
    }
  }
  
  private static final class PrefixMatchingArchiveFilter implements Archive.EntryFilter {
    private final String prefix;
    
    private final PropertiesLauncher.ArchiveEntryFilter filter = new PropertiesLauncher.ArchiveEntryFilter();
    
    private PrefixMatchingArchiveFilter(String prefix) {
      this.prefix = prefix;
    }
    
    public boolean matches(Archive.Entry entry) {
      if (entry.isDirectory())
        return entry.getName().equals(this.prefix); 
      return (entry.getName().startsWith(this.prefix) && this.filter.matches(entry));
    }
  }
  
  private static final class ArchiveEntryFilter implements Archive.EntryFilter {
    private static final String DOT_JAR = ".jar";
    
    private static final String DOT_ZIP = ".zip";
    
    private ArchiveEntryFilter() {}
    
    public boolean matches(Archive.Entry entry) {
      return (entry.getName().endsWith(".jar") || entry.getName().endsWith(".zip"));
    }
  }
}
